{"version":3,"sources":["components/Coba.js","actions/index.js","App.js","reducers/index.js","stores/index.js","serviceWorker.js","index.js"],"names":["Coba","console","log","this","props","testing","testing2","react_default","a","createElement","tests","item","tests2","Component","mapDispatchToProps","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","getState","rawResponse","content","wrap","_context","prev","next","fetch","sent","json","type","payload","stop","_x","_x2","apply","arguments","_ref2","_callee2","_context2","_x3","_x4","CobaContainer","connect","state","test","test2","App","_this","className","geod","title","onClick","closeGeod","activateGeod","components_Coba","AppContainer","reducers","combineReducers","length","undefined","action","store","initialState","createStore","applyMiddleware","thunk","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e612b03.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { tests,tests2 } from '../actions';\nclass Coba extends Component{\n\n    componentWillMount(){\n        console.log('MOUNTING COMPONENT');\n    }\n    \n    componentWillUnmount(){\n        console.log('UNMOUNTING COMPONENT')\n    }\n\n    render(){\n        console.log(this.props.testing);\n        console.log(this.props.testing2);\n        return (\n            <div>\n                {\"\"+this.props.testing+\"\"}\n            </div>\n        )\n    }\n    \n    componentDidMount(){\n        this.props.tests({ \n            item: 'welcome' \n        });\n        this.props.tests2({ \n            item: 'welcome' \n        });\n        console.log('COMPONENT DID MOUNTING');\n    }\n}\n\nconst mapStateToProps = state => {  \n    return ({\n      testing:state.test,\n      testing2:state.test2\n    })\n  };\n  \n  const mapDispatchToProps = {\n    tests,\n    tests2\n  };\n  \n  const CobaContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Coba);\n\n  export default CobaContainer;","export const activateGeod = geod => {  \n    return ({\n        type: 'ACTIVATE_GEOD',\n        geod,\n    });\n};\n\nexport const closeGeod = () => {    \n    return({\n        type: 'CLOSE_GEOD',\n    });\n};\n\nexport const tests = (item) =>{        \n    return async(dispatch,getState) => {\n        const rawResponse = await fetch('https://jsonplaceholder.typicode.com/todos/');\n        const content = await rawResponse.json();       \n        dispatch({\n            type:'CALL_TEST',\n            payload:content\n        })\n    }\n}\n\nexport const tests2  = (item)=>{\n    return async(dispatch,getState) => {\n        const rawResponse = await fetch('https://jsonplaceholder.typicode.com/todos/');\n        const content = await rawResponse.json();       \n        dispatch({\n            type:'CALL_TEST2',\n            content\n        })\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport { activateGeod, closeGeod, } from './actions';\nimport Coba from './components/Coba';\n\nclass App extends Component {  \n\n  render() {        \n    return (\n      <div className=\"App\">\n        <br/>\n        <h1>{this.props.geod.title || 'Hello World!'}</h1>\n        {this.props.geod.title ? (\n          <button onClick={this.props.closeGeod}>Exit Geod</button>\n        ) : (\n          <button\n            onClick={() =>\n              this.props.activateGeod({ title: 'I am a geo dude!' })\n            }\n          >\n            Click Me!\n          </button>\n        )}\n        <Coba/>\n      </div>\n    );\n  }\n}\n\n// AppContainer.js\nconst mapStateToProps = state => {\n  return ({\n    geod: state.geod,\n  })\n};\n\nconst mapDispatchToProps = {\n  activateGeod,\n  closeGeod,\n};\n\nconst AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nexport default AppContainer;\n","import { combineReducers } from 'redux';\n\nexport const geod = (state = {}, action) => {         \n    switch (action.type) {\n        case 'ACTIVATE_GEOD':      \n            return action.geod;\n        case 'CLOSE_GEOD':\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const test = (state = [],action)=>{   \n    // console.log();\n    switch(action.type){\n        case 'CALL_TEST':\n            return action.payload\n        default:\n            return state;\n    }\n}\n\nexport const test2 = (state = [],action)=>{   \n    switch(action.type){\n        case 'CALL_TEST2':\n            return action.content\n        default:\n            return state;\n    }\n}\n\nexport const reducers = combineReducers({\n    geod,\n    test,\n    test2\n});","import { createStore, applyMiddleware ,} from 'redux';\nimport {reducers} from '../reducers'\nimport thunk from 'redux-thunk';\n\n\nexport function configureStore(initialState = {}) {\n    const store = createStore(reducers, initialState,applyMiddleware(thunk));\n    return store;    \n};\n\nexport const store = configureStore();","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './stores';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}